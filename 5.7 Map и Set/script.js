// Map и Set
// Сейчас мы знаем о следующих сложных структурах данных:
//
//     Объекты для хранения именованных коллекций.
//     Массивы для хранения упорядоченных коллекций.
//     Но этого не всегда достаточно для решения повседневных задач. Поэтому также существуют Map и Set.
//
//     Map
// Map – это коллекция ключ/значение, как и Object. Но основное отличие в том, что Map позволяет использовать ключи любого типа.
//
//     Методы и свойства:
//
//     new Map() – создаёт коллекцию.
// map.set(key, value) – записывает по ключу key значение value.
// map.get(key) – возвращает значение по ключу или undefined, если ключ key отсутствует.
// map.has(key) – возвращает true, если ключ key присутствует в коллекции, иначе false.
// map.delete(key) – удаляет элемент по ключу key.
// map.clear() – очищает коллекцию от всех элементов.
//     map.size – возвращает текущее количество элементов.
//     Например:

// let map = new Map();
//
// map.set("1", "str1");    // строка в качестве ключа
// map.set(1, "num1");      // цифра как ключ
// map.set(true, "bool1");  // булево значение как ключ
// map.set(3, "Vova");
//
// // помните, обычный объект Object приводит ключи к строкам?
// // Map сохраняет тип ключей, так что в этом случае сохранится 2 разных значения:
// alert(map.get(1)); // "num1"
// alert(map.get("1")); // "str1"
// alert(map.get(3));
//
// alert(map.size); // 3
// Как мы видим, в отличие от объектов, ключи не были приведены к строкам. Можно использовать любые типы данных для ключей.
//
//     Map может использовать объекты в качестве ключей.
//
//     Например:

let john = { name: "John" };

// давайте сохраним количество посещений для каждого пользователя
let visitsCountMap = new Map();

// объект john - это ключ для значения в объекте Map
visitsCountMap.set(john, 123);

alert(visitsCountMap.get(john)); // 123